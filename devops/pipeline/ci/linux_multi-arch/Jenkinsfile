def version

pipeline {
    environment {
        MAILTO_ON_FAIL     = "n.zoltan18@gmail.com"

        LABEL_CONTROLLER   = "controller"
        LABEL_LINUX_X86_64 = "linux_x86-64"
        LABEL_LINUX_ARM64  = "linux_arm64"

        NAME               = "cps-npmrc-manager"
        ROOT               = "."

        NEXUS_URL          = "https://build.cp-sys.hu/nexus/repository/executable-releases"
        NEXUS_CREDENTIALS  = "pigeon-nexus"

        JDK_TOOL_ARM64     = "graalvm-17"
        JDK_TOOL_x64       = "graalvm-17-x64"
        MVN_TOOL           = "maven-3.9.4"
    }

    agent {
        label "${env.LABEL_CONTROLLER}"
    }

    triggers {
        pollSCM "H/15 * * * *"
    }

    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    stages {
        stage ('preparation') {
            steps {
                deleteDir()
                checkout scm
                script {
                    String snapshotVersion = readMavenPom(file: "${env.ROOT}/pom.xml").getVersion()
                    version = snapshotVersion.split("-SNAPSHOT")[0]
                }
            }
        }

        stage ('maven test') {
            steps {
                withMaven(maven: env.MVN_TOOL, jdk: env.JDK_TOOL_ARM64) {
                    sh "mvn test -f ${env.ROOT}/pom.xml"
                }
            }
        }

        stage ('maven build') {
            parallel {
                stage ('linux x86-64') {
                    agent {
                        label "${env.LABEL_LINUX_X86_64}"
                    }
                    steps {
                        withMaven(maven: env.MVN_TOOL, jdk: env.JDK_TOOL_x64) {
                            sh "mvn package -DskipTests=true -Pnative -f ${env.ROOT}/pom.xml"
                        }
                    }
                }

                stage ('linux arm64') {
                    agent {
                        label "${env.LABEL_LINUX_ARM64}"
                    }
                    steps {
                        withMaven(maven: env.MVN_TOOL, jdk: env.JDK_TOOL_ARM64) {
                            sh "mvn package -DskipTests=true -Pnative -f ${env.ROOT}/pom.xml"
                        }
                    }
                }
            }
        }

        stage ('publish executables') {
            parallel {
                stage ('linux x86-64') {
                    agent {
                        label "${env.LABEL_LINUX_X86_64}"
                    }
                    steps {
                        withCredentials([usernameColonPassword(credentialsId: "${env.NEXUS_CREDENTIALS}", variable: 'NEXUS_USERPASS')]) {
                            script {
                                def tarName = "${env.NAME}_${env.LABEL_LINUX_X86_64}_${version}.tar.gz"
                                tar(archive: true, compress: true, defaultExcludes: false, dir: "${env.ROOT}/target", exclude: '', file: tarName, glob: 'npmrcm', overwrite: false)
                                sh "curl -v --user $NEXUS_USERPASS --upload-file ./$tarName ${env.NEXUS_URL}/${env.NAME}/${env.LABEL_LINUX_X86_64}/$version/$tarName"
                            }
                        }
                    }
                }

                stage ('linux arm64') {
                    agent {
                        label "${env.LABEL_LINUX_ARM64}"
                    }
                    steps {
                        withCredentials([usernameColonPassword(credentialsId: "${env.NEXUS_CREDENTIALS}", variable: 'NEXUS_USERPASS')]) {
                            script {
                                def tarName = "${env.NAME}_${env.LABEL_LINUX_ARM64}_${version}.tar.gz"
                                tar(archive: true, compress: true, defaultExcludes: false, dir: "${env.ROOT}/target", exclude: '', file: tarName, glob: 'npmrcm', overwrite: false)
                                sh "curl -v --user $NEXUS_USERPASS --upload-file ./$tarName ${env.NEXUS_URL}/${env.NAME}/${env.LABEL_LINUX_ARM64}/$version/$tarName"
                            }
                        }
                    }
                }
            }
        }

        stage ('maven publish') {
            steps {
                withMaven(maven: env.MVN_TOOL, jdk: env.JDK_TOOL_ARM64) {
                    sh "mvn deploy -DskipTests=true -f ${env.ROOT}/pom.xml"
                }
            }
        }
    }

    post {
        failure {
            emailext(to: "${env.MAILTO_ON_FAIL}", subject: '$DEFAULT_SUBJECT', body: '$DEFAULT_CONTENT')
        }
    }
}